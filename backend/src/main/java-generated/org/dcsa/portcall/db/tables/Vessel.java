/*
 * This file is generated by jOOQ.
 */
package org.dcsa.portcall.db.tables;


import org.dcsa.portcall.db.Keys;
import org.dcsa.portcall.db.Public;
import org.dcsa.portcall.db.tables.records.VesselRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vessel extends TableImpl<VesselRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vessel</code>
     */
    public static final Vessel VESSEL = new Vessel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VesselRecord> getRecordType() {
        return VesselRecord.class;
    }

    /**
     * The column <code>public.vessel.id</code>.
     */
    public final TableField<VesselRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.vessel.carrier</code>.
     */
    public final TableField<VesselRecord, Integer> CARRIER = createField(DSL.name("carrier"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vessel.name</code>.
     */
    public final TableField<VesselRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.vessel.imo</code>.
     */
    public final TableField<VesselRecord, Integer> IMO = createField(DSL.name("imo"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vessel.teu</code>.
     */
    public final TableField<VesselRecord, Short> TEU = createField(DSL.name("teu"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.vessel.service_name_code</code>.
     */
    public final TableField<VesselRecord, String> SERVICE_NAME_CODE = createField(DSL.name("service_name_code"), SQLDataType.VARCHAR(255), this, "");

    private Vessel(Name alias, Table<VesselRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vessel(Name alias, Table<VesselRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vessel</code> table reference
     */
    public Vessel(String alias) {
        this(DSL.name(alias), VESSEL);
    }

    /**
     * Create an aliased <code>public.vessel</code> table reference
     */
    public Vessel(Name alias) {
        this(alias, VESSEL);
    }

    /**
     * Create a <code>public.vessel</code> table reference
     */
    public Vessel() {
        this(DSL.name("vessel"), null);
    }

    public <O extends Record> Vessel(Table<O> child, ForeignKey<O, VesselRecord> key) {
        super(child, key, VESSEL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<VesselRecord, Integer> getIdentity() {
        return (Identity<VesselRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VesselRecord> getPrimaryKey() {
        return Keys.VESSEL_PK;
    }

    @Override
    public List<UniqueKey<VesselRecord>> getKeys() {
        return Arrays.<UniqueKey<VesselRecord>>asList(Keys.VESSEL_PK, Keys.VESSEL_UQ_IMO);
    }

    @Override
    public List<ForeignKey<VesselRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VesselRecord, ?>>asList(Keys.VESSEL__VESSEL_FK_CARRIER);
    }

    public Carrier carrier() {
        return new Carrier(this, Keys.VESSEL__VESSEL_FK_CARRIER);
    }

    @Override
    public Vessel as(String alias) {
        return new Vessel(DSL.name(alias), this);
    }

    @Override
    public Vessel as(Name alias) {
        return new Vessel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vessel rename(String name) {
        return new Vessel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vessel rename(Name name) {
        return new Vessel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, Integer, Short, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
