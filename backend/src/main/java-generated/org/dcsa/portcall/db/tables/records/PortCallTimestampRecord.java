/*
 * This file is generated by jOOQ.
 */
package org.dcsa.portcall.db.tables.records;


import java.time.OffsetDateTime;

import org.dcsa.portcall.db.enums.Direction;
import org.dcsa.portcall.db.enums.PortCallTimestampType;
import org.dcsa.portcall.db.tables.PortCallTimestamp;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PortCallTimestampRecord extends UpdatableRecordImpl<PortCallTimestampRecord> implements Record15<Integer, Integer, Integer, Integer, Integer, PortCallTimestampType, Integer, OffsetDateTime, OffsetDateTime, Direction, Integer, String, String, Integer, Boolean> {

    private static final long serialVersionUID = -1187376013;

    /**
     * Setter for <code>public.port_call_timestamp.id</code>.
     */
    public PortCallTimestampRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.port_call_timestamp.vessel</code>.
     */
    public PortCallTimestampRecord setVessel(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.vessel</code>.
     */
    public Integer getVessel() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.port_call_timestamp.port_of_call</code>.
     */
    public PortCallTimestampRecord setPortOfCall(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.port_of_call</code>.
     */
    public Integer getPortOfCall() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.port_call_timestamp.port_previous</code>.
     */
    public PortCallTimestampRecord setPortPrevious(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.port_previous</code>.
     */
    public Integer getPortPrevious() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.port_call_timestamp.port_next</code>.
     */
    public PortCallTimestampRecord setPortNext(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.port_next</code>.
     */
    public Integer getPortNext() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.port_call_timestamp.timestamp_type</code>.
     */
    public PortCallTimestampRecord setTimestampType(PortCallTimestampType value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.timestamp_type</code>.
     */
    public PortCallTimestampType getTimestampType() {
        return (PortCallTimestampType) get(5);
    }

    /**
     * Setter for <code>public.port_call_timestamp.call_sequence</code>.
     */
    public PortCallTimestampRecord setCallSequence(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.call_sequence</code>.
     */
    public Integer getCallSequence() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.port_call_timestamp.event_timestamp</code>.
     */
    public PortCallTimestampRecord setEventTimestamp(OffsetDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.event_timestamp</code>.
     */
    public OffsetDateTime getEventTimestamp() {
        return (OffsetDateTime) get(7);
    }

    /**
     * Setter for <code>public.port_call_timestamp.log_of_timestamp</code>.
     */
    public PortCallTimestampRecord setLogOfTimestamp(OffsetDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.log_of_timestamp</code>.
     */
    public OffsetDateTime getLogOfTimestamp() {
        return (OffsetDateTime) get(8);
    }

    /**
     * Setter for <code>public.port_call_timestamp.direction</code>.
     */
    public PortCallTimestampRecord setDirection(Direction value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.direction</code>.
     */
    public Direction getDirection() {
        return (Direction) get(9);
    }

    /**
     * Setter for <code>public.port_call_timestamp.terminal</code>.
     */
    public PortCallTimestampRecord setTerminal(Integer value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.terminal</code>.
     */
    public Integer getTerminal() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>public.port_call_timestamp.location_id</code>.
     */
    public PortCallTimestampRecord setLocationId(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.location_id</code>.
     */
    public String getLocationId() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.port_call_timestamp.change_comment</code>.
     */
    public PortCallTimestampRecord setChangeComment(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.change_comment</code>.
     */
    public String getChangeComment() {
        return (String) get(12);
    }

    /**
     * Setter for <code>public.port_call_timestamp.delay_code</code>.
     */
    public PortCallTimestampRecord setDelayCode(Integer value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.delay_code</code>.
     */
    public Integer getDelayCode() {
        return (Integer) get(13);
    }

    /**
     * Setter for <code>public.port_call_timestamp.deleted</code>.
     */
    public PortCallTimestampRecord setDeleted(Boolean value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>public.port_call_timestamp.deleted</code>.
     */
    public Boolean getDeleted() {
        return (Boolean) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, Integer, Integer, Integer, Integer, PortCallTimestampType, Integer, OffsetDateTime, OffsetDateTime, Direction, Integer, String, String, Integer, Boolean> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    @Override
    public Row15<Integer, Integer, Integer, Integer, Integer, PortCallTimestampType, Integer, OffsetDateTime, OffsetDateTime, Direction, Integer, String, String, Integer, Boolean> valuesRow() {
        return (Row15) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.ID;
    }

    @Override
    public Field<Integer> field2() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.VESSEL;
    }

    @Override
    public Field<Integer> field3() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.PORT_OF_CALL;
    }

    @Override
    public Field<Integer> field4() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.PORT_PREVIOUS;
    }

    @Override
    public Field<Integer> field5() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.PORT_NEXT;
    }

    @Override
    public Field<PortCallTimestampType> field6() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.TIMESTAMP_TYPE;
    }

    @Override
    public Field<Integer> field7() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.CALL_SEQUENCE;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.EVENT_TIMESTAMP;
    }

    @Override
    public Field<OffsetDateTime> field9() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.LOG_OF_TIMESTAMP;
    }

    @Override
    public Field<Direction> field10() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.DIRECTION;
    }

    @Override
    public Field<Integer> field11() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.TERMINAL;
    }

    @Override
    public Field<String> field12() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.LOCATION_ID;
    }

    @Override
    public Field<String> field13() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.CHANGE_COMMENT;
    }

    @Override
    public Field<Integer> field14() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.DELAY_CODE;
    }

    @Override
    public Field<Boolean> field15() {
        return PortCallTimestamp.PORT_CALL_TIMESTAMP.DELETED;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVessel();
    }

    @Override
    public Integer component3() {
        return getPortOfCall();
    }

    @Override
    public Integer component4() {
        return getPortPrevious();
    }

    @Override
    public Integer component5() {
        return getPortNext();
    }

    @Override
    public PortCallTimestampType component6() {
        return getTimestampType();
    }

    @Override
    public Integer component7() {
        return getCallSequence();
    }

    @Override
    public OffsetDateTime component8() {
        return getEventTimestamp();
    }

    @Override
    public OffsetDateTime component9() {
        return getLogOfTimestamp();
    }

    @Override
    public Direction component10() {
        return getDirection();
    }

    @Override
    public Integer component11() {
        return getTerminal();
    }

    @Override
    public String component12() {
        return getLocationId();
    }

    @Override
    public String component13() {
        return getChangeComment();
    }

    @Override
    public Integer component14() {
        return getDelayCode();
    }

    @Override
    public Boolean component15() {
        return getDeleted();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVessel();
    }

    @Override
    public Integer value3() {
        return getPortOfCall();
    }

    @Override
    public Integer value4() {
        return getPortPrevious();
    }

    @Override
    public Integer value5() {
        return getPortNext();
    }

    @Override
    public PortCallTimestampType value6() {
        return getTimestampType();
    }

    @Override
    public Integer value7() {
        return getCallSequence();
    }

    @Override
    public OffsetDateTime value8() {
        return getEventTimestamp();
    }

    @Override
    public OffsetDateTime value9() {
        return getLogOfTimestamp();
    }

    @Override
    public Direction value10() {
        return getDirection();
    }

    @Override
    public Integer value11() {
        return getTerminal();
    }

    @Override
    public String value12() {
        return getLocationId();
    }

    @Override
    public String value13() {
        return getChangeComment();
    }

    @Override
    public Integer value14() {
        return getDelayCode();
    }

    @Override
    public Boolean value15() {
        return getDeleted();
    }

    @Override
    public PortCallTimestampRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value2(Integer value) {
        setVessel(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value3(Integer value) {
        setPortOfCall(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value4(Integer value) {
        setPortPrevious(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value5(Integer value) {
        setPortNext(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value6(PortCallTimestampType value) {
        setTimestampType(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value7(Integer value) {
        setCallSequence(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value8(OffsetDateTime value) {
        setEventTimestamp(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value9(OffsetDateTime value) {
        setLogOfTimestamp(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value10(Direction value) {
        setDirection(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value11(Integer value) {
        setTerminal(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value12(String value) {
        setLocationId(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value13(String value) {
        setChangeComment(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value14(Integer value) {
        setDelayCode(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord value15(Boolean value) {
        setDeleted(value);
        return this;
    }

    @Override
    public PortCallTimestampRecord values(Integer value1, Integer value2, Integer value3, Integer value4, Integer value5, PortCallTimestampType value6, Integer value7, OffsetDateTime value8, OffsetDateTime value9, Direction value10, Integer value11, String value12, String value13, Integer value14, Boolean value15) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PortCallTimestampRecord
     */
    public PortCallTimestampRecord() {
        super(PortCallTimestamp.PORT_CALL_TIMESTAMP);
    }

    /**
     * Create a detached, initialised PortCallTimestampRecord
     */
    public PortCallTimestampRecord(Integer id, Integer vessel, Integer portOfCall, Integer portPrevious, Integer portNext, PortCallTimestampType timestampType, Integer callSequence, OffsetDateTime eventTimestamp, OffsetDateTime logOfTimestamp, Direction direction, Integer terminal, String locationId, String changeComment, Integer delayCode, Boolean deleted) {
        super(PortCallTimestamp.PORT_CALL_TIMESTAMP);

        set(0, id);
        set(1, vessel);
        set(2, portOfCall);
        set(3, portPrevious);
        set(4, portNext);
        set(5, timestampType);
        set(6, callSequence);
        set(7, eventTimestamp);
        set(8, logOfTimestamp);
        set(9, direction);
        set(10, terminal);
        set(11, locationId);
        set(12, changeComment);
        set(13, delayCode);
        set(14, deleted);
    }
}
