/*
 * This file is generated by jOOQ.
 */
package org.dcsa.portcall.db.tables;


import org.dcsa.portcall.db.Public;
import org.dcsa.portcall.db.enums.EventClassifier;
import org.dcsa.portcall.db.enums.LocationType;
import org.dcsa.portcall.db.enums.PortCallTimestampType;
import org.dcsa.portcall.db.enums.TransportEventType;
import org.dcsa.portcall.db.tables.records.PortcallTimestampMappingRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PortcallTimestampMapping extends TableImpl<PortcallTimestampMappingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.portcall_timestamp_mapping</code>
     */
    public static final PortcallTimestampMapping PORTCALL_TIMESTAMP_MAPPING = new PortcallTimestampMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortcallTimestampMappingRecord> getRecordType() {
        return PortcallTimestampMappingRecord.class;
    }

    /**
     * The column <code>public.portcall_timestamp_mapping.id</code>.
     */
    public final TableField<PortcallTimestampMappingRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.portcall_timestamp_mapping.timestamp_type</code>.
     */
    public final TableField<PortcallTimestampMappingRecord, PortCallTimestampType> TIMESTAMP_TYPE = createField(DSL.name("timestamp_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(org.dcsa.portcall.db.enums.PortCallTimestampType.class), this, "");

    /**
     * The column <code>public.portcall_timestamp_mapping.location</code>.
     */
    public final TableField<PortcallTimestampMappingRecord, LocationType> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(org.dcsa.portcall.db.enums.LocationType.class), this, "");

    /**
     * The column <code>public.portcall_timestamp_mapping.event_classiefier</code>.
     */
    public final TableField<PortcallTimestampMappingRecord, EventClassifier> EVENT_CLASSIEFIER = createField(DSL.name("event_classiefier"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(org.dcsa.portcall.db.enums.EventClassifier.class), this, "");

    /**
     * The column <code>public.portcall_timestamp_mapping.transport_event</code>.
     */
    public final TableField<PortcallTimestampMappingRecord, TransportEventType> TRANSPORT_EVENT = createField(DSL.name("transport_event"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(org.dcsa.portcall.db.enums.TransportEventType.class), this, "");

    private PortcallTimestampMapping(Name alias, Table<PortcallTimestampMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private PortcallTimestampMapping(Name alias, Table<PortcallTimestampMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.portcall_timestamp_mapping</code> table reference
     */
    public PortcallTimestampMapping(String alias) {
        this(DSL.name(alias), PORTCALL_TIMESTAMP_MAPPING);
    }

    /**
     * Create an aliased <code>public.portcall_timestamp_mapping</code> table reference
     */
    public PortcallTimestampMapping(Name alias) {
        this(alias, PORTCALL_TIMESTAMP_MAPPING);
    }

    /**
     * Create a <code>public.portcall_timestamp_mapping</code> table reference
     */
    public PortcallTimestampMapping() {
        this(DSL.name("portcall_timestamp_mapping"), null);
    }

    public <O extends Record> PortcallTimestampMapping(Table<O> child, ForeignKey<O, PortcallTimestampMappingRecord> key) {
        super(child, key, PORTCALL_TIMESTAMP_MAPPING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PortcallTimestampMappingRecord, Integer> getIdentity() {
        return (Identity<PortcallTimestampMappingRecord, Integer>) super.getIdentity();
    }

    @Override
    public PortcallTimestampMapping as(String alias) {
        return new PortcallTimestampMapping(DSL.name(alias), this);
    }

    @Override
    public PortcallTimestampMapping as(Name alias) {
        return new PortcallTimestampMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortcallTimestampMapping rename(String name) {
        return new PortcallTimestampMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortcallTimestampMapping rename(Name name) {
        return new PortcallTimestampMapping(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, PortCallTimestampType, LocationType, EventClassifier, TransportEventType> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
