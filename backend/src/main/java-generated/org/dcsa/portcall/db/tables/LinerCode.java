/*
 * This file is generated by jOOQ.
 */
package org.dcsa.portcall.db.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.dcsa.portcall.db.Keys;
import org.dcsa.portcall.db.Public;
import org.dcsa.portcall.db.tables.records.LinerCodeRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LinerCode extends TableImpl<LinerCodeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.liner_code</code>
     */
    public static final LinerCode LINER_CODE = new LinerCode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LinerCodeRecord> getRecordType() {
        return LinerCodeRecord.class;
    }

    /**
     * The column <code>public.liner_code.id</code>.
     */
    public final TableField<LinerCodeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.liner_code.smdg_code</code>.
     */
    public final TableField<LinerCodeRecord, String> SMDG_CODE = createField(DSL.name("smdg_code"), SQLDataType.VARCHAR(4).nullable(false), this, "");

    /**
     * The column <code>public.liner_code.line</code>.
     */
    public final TableField<LinerCodeRecord, String> LINE = createField(DSL.name("line"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.liner_code.valid_from</code>.
     */
    public final TableField<LinerCodeRecord, LocalDate> VALID_FROM = createField(DSL.name("valid_from"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.liner_code.website</code>.
     */
    public final TableField<LinerCodeRecord, String> WEBSITE = createField(DSL.name("website"), SQLDataType.VARCHAR(200), this, "");

    private LinerCode(Name alias, Table<LinerCodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private LinerCode(Name alias, Table<LinerCodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.liner_code</code> table reference
     */
    public LinerCode(String alias) {
        this(DSL.name(alias), LINER_CODE);
    }

    /**
     * Create an aliased <code>public.liner_code</code> table reference
     */
    public LinerCode(Name alias) {
        this(alias, LINER_CODE);
    }

    /**
     * Create a <code>public.liner_code</code> table reference
     */
    public LinerCode() {
        this(DSL.name("liner_code"), null);
    }

    public <O extends Record> LinerCode(Table<O> child, ForeignKey<O, LinerCodeRecord> key) {
        super(child, key, LINER_CODE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LinerCodeRecord, Integer> getIdentity() {
        return (Identity<LinerCodeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LinerCodeRecord> getPrimaryKey() {
        return Keys.LINER_CODE_PK;
    }

    @Override
    public List<UniqueKey<LinerCodeRecord>> getKeys() {
        return Arrays.<UniqueKey<LinerCodeRecord>>asList(Keys.LINER_CODE_PK, Keys.LINER_CODE_UN);
    }

    @Override
    public LinerCode as(String alias) {
        return new LinerCode(DSL.name(alias), this);
    }

    @Override
    public LinerCode as(Name alias) {
        return new LinerCode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LinerCode rename(String name) {
        return new LinerCode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LinerCode rename(Name name) {
        return new LinerCode(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDate, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
